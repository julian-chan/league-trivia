{"version":3,"sources":["components/MainBanner/MainBanner.js","components/Home/Home.js","components/ConfirmEndGamePopup/ConfirmEndGamePopup.js","components/utils.js","components/GameStatisticsDisplay/GameStatisticsDisplay.js","components/QuestionDisplay/QuestionDisplay.js","components/AnswerChoicesDisplay/AnswerChoicesDisplay.js","components/FeedbackDisplay/FeedbackDisplay.js","components/GameInterface/GameInterface.js","App.js","reportWebVitals.js","index.js"],"names":["MainBanner","props","className","Home","history","useHistory","onClick","push","ConfirmEndGamePopup","handleClosePopup","CHAMPION_NAME_QUESTION_TYPE","ITEM_NAME_QUESTION_TYPE","RUNE_TO_TREE_ASSOC_QUESTION_TYPE","QUESTION_TYPE_TO_ANSWER_CHOICE_KEY","QUESTION_TYPE_TO_QUESTION_IMAGE_DIR","QUESTION_TYPE_TO_IMAGE_KEY","IMAGE_QUESTION_TYPES","Set","Object","keys","QUESTION_TYPE_TO_ANSWER_CHOICE_IMAGE_DIR","IMAGE_ANSWER_CHOICES_QUESTION_TYPES","TEXT_ANSWER_CHOICES_QUESTION_TYPES","IRON_RANK","BRONZE_RANK","SILVER_RANK","GOLD_RANK","PLATINUM_RANK","DIAMOND_RANK","MASTER_RANK","GRANDMASTER_RANK","CHALLENGER_RANK","RANK_TO_EMBLEM_IMAGE","TIER_TO_MIN_QUALIFICATIONS","1","2","3","4","5","6","7","8","9","determineAnswerChoiceKeyFromQuestionType","questionType","determineRankGivenPerformance","numQuestionsAnswered","numQuestionsAnsweredCorrectly","percentCorrect","obtainableTiers","tier","minQuestionsAnsweredNeeded","minPercentCorrectNeeded","highestObtainableTier","sort","tier1","tier2","length","GameStatisticsDisplay","useState","questionCount","setQuestionCount","correctCount","setCorrectCount","ConstantsUtils","currentRank","setCurrentRank","useEffect","src","process","alt","QuestionDisplay","questionText","setQuestionText","questionImage","setQuestionImage","defaultProps","AnswerChoicesDisplay","setQuestionType","answerChoices","setAnswerChoices","hasSelectedAnswer","setHasSelectedAnswer","answerChoiceKey","has","map","choice","index","disabled","handleAnswerChoice","imageDir","FeedbackDisplay","feedbackLogoToUse","isCorrect","setIsCorrect","selectedAnswer","setSelectedAnswer","correctAnswer","setCorrectAnswer","explanation","setExplanation","correctAnswerDisplay","selectedAnswerDisplay","feedbackText","explanationText","handleContinue","GameInterface","isEndGamePopupOpen","setIsEndGamePopupOpen","incorrectCount","setIncorrectCount","questionFromApi","setQuestionFromApi","isAnswerCorrect","setIsAnswerCorrect","toggleConfirmEndGamePopup","fetchNextQuestion","fetch","then","response","ok","json","Error","statusText","responseJson","questionData","correctAnswerIndex","catch","error","console","log","continueAfterViewingFeedback","questionDisplay","imageKey","answerChoicesDisplay","formatQuestionAndAnswerDisplayFromQuestionType","showOrHideFeedbackDisplay","showOrHideEndGamePopup","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf6a337b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './MainBanner.css';\r\n\r\nfunction MainBanner(props) {\r\n  return (\r\n    <div className=\"MainBanner\">\r\n      League of Legends Trivia\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainBanner;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport MainBanner from '../MainBanner/MainBanner';\r\nimport './Home.css';\r\n\r\nfunction Home() {\r\n  let history = useHistory();\r\n\r\n  const handlePlayButtonClick = () => {\r\n    history.push(\"/play\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"Home\">\r\n      <MainBanner />\r\n      <button className=\"PlayButton\" onClick={handlePlayButtonClick}>\r\n        Play!\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './ConfirmEndGamePopup.css';\r\n\r\nfunction ConfirmEndGamePopup(props) {\r\n  let history = useHistory();\r\n\r\n  const handleConfirmEndGameButtonClick = () => {\r\n    props.handleClosePopup();\r\n    history.push(\"/\");\r\n  }\r\n\r\n  const handleGoBackButtonClick = () => {\r\n    props.handleClosePopup();\r\n  }\r\n\r\n  return (\r\n    <div className=\"ConfirmEndGamePopup\">\r\n      <div className=\"ConfirmEndGamePopupBox\">\r\n        <div className=\"ConfirmEndGamePopupText\">\r\n          Are you sure you want to end the game?\r\n        </div>\r\n        <button className=\"ConfirmEndGamePopupButton\" onClick={handleConfirmEndGameButtonClick}>\r\n          End Game\r\n        </button>\r\n        <button className=\"ConfirmEndGamePopupButton\" onClick={handleGoBackButtonClick}>\r\n          Go Back\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ConfirmEndGamePopup;","/**\r\n * -----------------------------------------------------------------------------------------------------------------------------------------\r\n * |                                                          Constants                                                                    |\r\n * -----------------------------------------------------------------------------------------------------------------------------------------\r\n */\r\n\r\n// These should be the same question types used in the backend\r\nexport const CHAMPION_NAME_QUESTION_TYPE = \"champion_name\";\r\nexport const ITEM_NAME_QUESTION_TYPE = \"item_name\";\r\nexport const RUNE_TO_TREE_ASSOC_QUESTION_TYPE = \"rune_to_tree_assoc\";\r\nexport const PASSIVE_TO_CHAMPION_ASSOC_QUESTION_TYPE = \"passive_to_champion_assoc\";\r\nexport const SPELL_TO_CHAMPION_ASSOC_QUESTION_TYPE = \"spell_to_champion_assoc\";\r\nexport const ODD_SPELL_OUT_QUESTION_TYPE = \"odd_spell_out\";\r\n// These are the keys in the answer choices JSON to find the field to compare answers\r\nexport const CHAMPION_NAME_QUESTION_TYPE_ANSWER_CHOICE_KEY = \"championName\";\r\nexport const ITEM_NAME_QUESTION_TYPE_ANSWER_CHOICE_KEY = \"itemName\";\r\nexport const RUNE_TO_TREE_ASSOC_QUESTION_TYPE_ANSWER_CHOICE_KEY = \"runeName\";\r\nexport const PASSIVE_TO_CHAMPION_ASSOC_QUESTION_TYPE_ANSWER_CHOICE_KEY = \"passiveImage\";\r\nexport const SPELL_TO_CHAMPION_ASSOC_QUESTION_TYPE_ANSWER_CHOICE_KEY = \"spellImage\";\r\nexport const ODD_SPELL_OUT_QUESTION_TYPE_ANSWER_CHOICE_KEY = \"spellImage\";\r\n// This maps the question type to the key in the answer choice JSON that should be used\r\nconst QUESTION_TYPE_TO_ANSWER_CHOICE_KEY = {};\r\nQUESTION_TYPE_TO_ANSWER_CHOICE_KEY[CHAMPION_NAME_QUESTION_TYPE] = CHAMPION_NAME_QUESTION_TYPE_ANSWER_CHOICE_KEY;\r\nQUESTION_TYPE_TO_ANSWER_CHOICE_KEY[ITEM_NAME_QUESTION_TYPE] = ITEM_NAME_QUESTION_TYPE_ANSWER_CHOICE_KEY;\r\nQUESTION_TYPE_TO_ANSWER_CHOICE_KEY[RUNE_TO_TREE_ASSOC_QUESTION_TYPE] = RUNE_TO_TREE_ASSOC_QUESTION_TYPE_ANSWER_CHOICE_KEY;\r\nQUESTION_TYPE_TO_ANSWER_CHOICE_KEY[PASSIVE_TO_CHAMPION_ASSOC_QUESTION_TYPE] = PASSIVE_TO_CHAMPION_ASSOC_QUESTION_TYPE_ANSWER_CHOICE_KEY;\r\nQUESTION_TYPE_TO_ANSWER_CHOICE_KEY[SPELL_TO_CHAMPION_ASSOC_QUESTION_TYPE] = SPELL_TO_CHAMPION_ASSOC_QUESTION_TYPE_ANSWER_CHOICE_KEY;\r\nQUESTION_TYPE_TO_ANSWER_CHOICE_KEY[ODD_SPELL_OUT_QUESTION_TYPE] = ODD_SPELL_OUT_QUESTION_TYPE_ANSWER_CHOICE_KEY;\r\n\r\n// This maps the question type to the directory where images that need to be rendered for the question are stored\r\nexport const QUESTION_TYPE_TO_QUESTION_IMAGE_DIR = {};\r\nQUESTION_TYPE_TO_QUESTION_IMAGE_DIR[CHAMPION_NAME_QUESTION_TYPE] = \"/league-assets/img/champion/\";\r\nQUESTION_TYPE_TO_QUESTION_IMAGE_DIR[ITEM_NAME_QUESTION_TYPE] = \"/league-assets/img/item/\";\r\nQUESTION_TYPE_TO_QUESTION_IMAGE_DIR[RUNE_TO_TREE_ASSOC_QUESTION_TYPE] = \"/league-assets/img/\";\r\nQUESTION_TYPE_TO_QUESTION_IMAGE_DIR[PASSIVE_TO_CHAMPION_ASSOC_QUESTION_TYPE] = \"/league-assets/img/champion/\";\r\nQUESTION_TYPE_TO_QUESTION_IMAGE_DIR[SPELL_TO_CHAMPION_ASSOC_QUESTION_TYPE] = \"/league-assets/img/champion/\";\r\n// This maps the question type to the key in the question JSON that should be used to fetch the image to render\r\nexport const QUESTION_TYPE_TO_IMAGE_KEY = {};\r\nQUESTION_TYPE_TO_IMAGE_KEY[CHAMPION_NAME_QUESTION_TYPE] = \"championImage\";\r\nQUESTION_TYPE_TO_IMAGE_KEY[ITEM_NAME_QUESTION_TYPE] = \"itemImage\";\r\nQUESTION_TYPE_TO_IMAGE_KEY[RUNE_TO_TREE_ASSOC_QUESTION_TYPE] = \"runeTreeIcon\";\r\nQUESTION_TYPE_TO_IMAGE_KEY[PASSIVE_TO_CHAMPION_ASSOC_QUESTION_TYPE] = \"championImage\";\r\nQUESTION_TYPE_TO_IMAGE_KEY[SPELL_TO_CHAMPION_ASSOC_QUESTION_TYPE] = \"championImage\";\r\n// These question types ave images in the question\r\nexport const IMAGE_QUESTION_TYPES = new Set(Object.keys(QUESTION_TYPE_TO_QUESTION_IMAGE_DIR));\r\n\r\n// This maps the question type to the directory where images that need to be rendered for the answer choices are stored\r\nexport const QUESTION_TYPE_TO_ANSWER_CHOICE_IMAGE_DIR = {};\r\nQUESTION_TYPE_TO_ANSWER_CHOICE_IMAGE_DIR[PASSIVE_TO_CHAMPION_ASSOC_QUESTION_TYPE] = \"/league-assets/img/passive/\";\r\nQUESTION_TYPE_TO_ANSWER_CHOICE_IMAGE_DIR[SPELL_TO_CHAMPION_ASSOC_QUESTION_TYPE] = \"/league-assets/img/spell/\";\r\nQUESTION_TYPE_TO_ANSWER_CHOICE_IMAGE_DIR[ODD_SPELL_OUT_QUESTION_TYPE] = \"/league-assets/img/spell/\";\r\n// These question types have images in the answer choices\r\nexport const IMAGE_ANSWER_CHOICES_QUESTION_TYPES = new Set(Object.keys(QUESTION_TYPE_TO_ANSWER_CHOICE_IMAGE_DIR));\r\n\r\n// These question types have only text in the answer choices\r\nexport const TEXT_ANSWER_CHOICES_QUESTION_TYPES = new Set([CHAMPION_NAME_QUESTION_TYPE, ITEM_NAME_QUESTION_TYPE, RUNE_TO_TREE_ASSOC_QUESTION_TYPE]);\r\n\r\n// Strings representing ranks for consistency\r\nconst IRON_RANK = \"Iron\";\r\nconst BRONZE_RANK = \"Bronze\";\r\nconst SILVER_RANK = \"Silver\";\r\nconst GOLD_RANK = \"Gold\";\r\nconst PLATINUM_RANK = \"Platinum\";\r\nconst DIAMOND_RANK = \"Diamond\";\r\nconst MASTER_RANK = \"Master\";\r\nconst GRANDMASTER_RANK = \"Grandmaster\";\r\nconst CHALLENGER_RANK = \"Challenger\";\r\n\r\n// Map of the rank to the emblem image for that rank\r\nexport const RANK_TO_EMBLEM_IMAGE = {};\r\nRANK_TO_EMBLEM_IMAGE[IRON_RANK] = \"/league-assets/img/ranked-emblems/Emblem_Iron.png\";\r\nRANK_TO_EMBLEM_IMAGE[BRONZE_RANK] = \"/league-assets/img/ranked-emblems/Emblem_Bronze.png\";\r\nRANK_TO_EMBLEM_IMAGE[SILVER_RANK] = \"/league-assets/img/ranked-emblems/Emblem_Silver.png\";\r\nRANK_TO_EMBLEM_IMAGE[GOLD_RANK] = \"/league-assets/img/ranked-emblems/Emblem_Gold.png\";\r\nRANK_TO_EMBLEM_IMAGE[PLATINUM_RANK] = \"/league-assets/img/ranked-emblems/Emblem_Platinum.png\";\r\nRANK_TO_EMBLEM_IMAGE[DIAMOND_RANK] = \"/league-assets/img/ranked-emblems/Emblem_Diamond.png\";\r\nRANK_TO_EMBLEM_IMAGE[MASTER_RANK] = \"/league-assets/img/ranked-emblems/Emblem_Master.png\";\r\nRANK_TO_EMBLEM_IMAGE[GRANDMASTER_RANK] = \"/league-assets/img/ranked-emblems/Emblem_Grandmaster.png\";\r\nRANK_TO_EMBLEM_IMAGE[CHALLENGER_RANK] = \"/league-assets/img/ranked-emblems/Emblem_Challenger.png\";\r\n\r\n// Map of the tier to the minimum qualifications to be considered for each tier\r\nexport const TIER_TO_MIN_QUALIFICATIONS = {\r\n  1: {\"rank\": IRON_RANK, \"questionsAnswered\": 0, \"percentCorrect\": 0},\r\n  2: {\"rank\": BRONZE_RANK, \"questionsAnswered\": 3, \"percentCorrect\": 0.2},\r\n  3: {\"rank\": SILVER_RANK, \"questionsAnswered\": 6, \"percentCorrect\": 0.35},\r\n  4: {\"rank\": GOLD_RANK, \"questionsAnswered\": 9, \"percentCorrect\": 0.5},\r\n  5: {\"rank\": PLATINUM_RANK, \"questionsAnswered\": 12, \"percentCorrect\": 0.65},\r\n  6: {\"rank\": DIAMOND_RANK, \"questionsAnswered\": 15, \"percentCorrect\": 0.75},\r\n  7: {\"rank\": MASTER_RANK, \"questionsAnswered\": 20, \"percentCorrect\": 0.85},\r\n  8: {\"rank\": GRANDMASTER_RANK, \"questionsAnswered\": 25, \"percentCorrect\": 0.9},\r\n  9: {\"rank\": CHALLENGER_RANK, \"questionsAnswered\": 30, \"percentCorrect\": 0.95}\r\n}\r\n\r\n/**\r\n * -----------------------------------------------------------------------------------------------------------------------------------------\r\n * |                                                          Methods                                                                      |\r\n * -----------------------------------------------------------------------------------------------------------------------------------------\r\n */\r\n\r\n// Method to determine what key is used to fetch the answer display used in the answer choices for the given type of question\r\nexport const determineAnswerChoiceKeyFromQuestionType = (questionType) => {\r\n  return QUESTION_TYPE_TO_ANSWER_CHOICE_KEY[questionType];\r\n};\r\n\r\n// Method to determine the rank given the number of questions answered and number of questions answered correctly\r\nexport const determineRankGivenPerformance = (numQuestionsAnswered, numQuestionsAnsweredCorrectly) => {\r\n  const percentCorrect = numQuestionsAnswered === 0 ? 0 : numQuestionsAnsweredCorrectly / numQuestionsAnswered;\r\n\r\n  // First determine all the possible tiers that can be obtained based on the given performance and\r\n  // the minimum qualifications for each tier\r\n  let obtainableTiers = [];\r\n  for (let tier in TIER_TO_MIN_QUALIFICATIONS) {\r\n    // If performance satisfies minimum qualifications for the tier, we can consider the tier as obtainable\r\n    let minQuestionsAnsweredNeeded = TIER_TO_MIN_QUALIFICATIONS[tier][\"questionsAnswered\"];\r\n    let minPercentCorrectNeeded = TIER_TO_MIN_QUALIFICATIONS[tier][\"percentCorrect\"];\r\n    if (numQuestionsAnswered >= minQuestionsAnsweredNeeded && percentCorrect >= minPercentCorrectNeeded) {\r\n      obtainableTiers.push(tier);\r\n    }\r\n  }\r\n\r\n  // Tier 1 is always obtainable so there should always be 1 obtainable tier\r\n  let highestObtainableTier = obtainableTiers.sort((tier1, tier2) => tier1 - tier2)[obtainableTiers.length - 1];\r\n  return TIER_TO_MIN_QUALIFICATIONS[highestObtainableTier][\"rank\"];\r\n}","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as ConstantsUtils from '../utils';\r\nimport './GameStatisticsDisplay.css';\r\n\r\nfunction GameStatisticsDisplay(props) {\r\n  const [questionCount, setQuestionCount] = useState(props.questionCount);\r\n  const [correctCount, setCorrectCount] = useState(props.correctCount);\r\n  const [currentRank, setCurrentRank] = useState(ConstantsUtils.determineRankGivenPerformance(questionCount, correctCount));\r\n\r\n  useEffect(() => {\r\n    setQuestionCount(props.questionCount);\r\n    setCorrectCount(props.correctCount);\r\n    setCurrentRank(ConstantsUtils.determineRankGivenPerformance(props.questionCount, props.correctCount));\r\n  }, [props.questionCount, props.correctCount]);\r\n\r\n  return (\r\n    <div className=\"GameStatisticsDisplay\">\r\n      <div className=\"StatisticRowsContainer\">\r\n        <p className=\"StatisticRow\"># Questions: {questionCount}</p>\r\n        <p className=\"StatisticRow\"># Correct: {correctCount}</p>\r\n        <p className=\"StatisticRow\"># Incorrect: {questionCount - correctCount}</p>\r\n      </div>\r\n      <div className=\"RankImageAndTextContainer\">\r\n        <img className=\"RankImage\" src={process.env.PUBLIC_URL + ConstantsUtils.RANK_TO_EMBLEM_IMAGE[currentRank]} alt=\"Rank\"/>\r\n        <div className=\"RankText\">{currentRank}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nGameStatisticsDisplay.propTypes = {\r\n  // Number of questions answered\r\n  questionCount: PropTypes.number.isRequired,\r\n  // Number of questions answered correctly\r\n  correctCount: PropTypes.number.isRequired\r\n}\r\n\r\nexport default GameStatisticsDisplay;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './QuestionDisplay.css';\r\n\r\nfunction QuestionDisplay(props) {\r\n  const [questionText, setQuestionText] = useState(\"\");\r\n  const [questionImage, setQuestionImage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setQuestionText(props.questionText);\r\n    setQuestionImage(props.questionImage);\r\n  }, [props.questionText, props.questionImage]);\r\n\r\n  // If there is no question text yet, don't render anything\r\n  if (questionText.length === 0) {\r\n    return null;\r\n  // If there is question text but no image, then just render the question text\r\n  } else if (questionImage.length === 0) {\r\n    return (\r\n      <div className=\"QuestionDisplay\">\r\n        <div className=\"QuestionText\">{questionText}</div>\r\n      </div>\r\n    )\r\n  // Otherwise, render both the question text and the image\r\n  } else {\r\n    return (\r\n      <div className=\"QuestionDisplay\">\r\n        <div className=\"QuestionText\">\r\n          {questionText}\r\n        </div>\r\n        <img className=\"QuestionImage\" src={questionImage} alt=\"Question\"/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nQuestionDisplay.propTypes = {\r\n  // Text of the question\r\n  questionText: PropTypes.string.isRequired,\r\n  // Full path of the image file to include with the question\r\n  questionImage: PropTypes.string\r\n}\r\n\r\nQuestionDisplay.defaultProps = {\r\n  // Default to empty string if the full path of the image file to include with the question is not passed in\r\n  questionImage: \"\"\r\n}\r\n\r\nexport default QuestionDisplay;","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as ConstantsUtils from '../utils';\r\nimport './AnswerChoicesDisplay.css';\r\n\r\nfunction AnswerChoicesDisplay(props) {\r\n  const [questionType, setQuestionType] = useState(\"\");\r\n  const [answerChoices, setAnswerChoices] = useState([]);\r\n  const [hasSelectedAnswer, setHasSelectedAnswer] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setQuestionType(props.questionType);\r\n    setAnswerChoices(props.answerChoices);\r\n    setHasSelectedAnswer(props.hasSelectedAnswer);\r\n  }, [props.questionType, props.answerChoices, props.hasSelectedAnswer]);\r\n\r\n  let answerChoiceKey = ConstantsUtils.determineAnswerChoiceKeyFromQuestionType(questionType);\r\n\r\n  // If there is no question type yet, don't render anything\r\n  if (questionType.length === 0) {\r\n    return null;\r\n  // These question types only need to render text for the answer choices\r\n  } else if (ConstantsUtils.TEXT_ANSWER_CHOICES_QUESTION_TYPES.has(questionType)) {\r\n    return (\r\n      <div className=\"AnswerChoicesDisplay\">\r\n        {answerChoices.map((choice, index) => {\r\n          return <button disabled={hasSelectedAnswer} key={\"choice\" + index} className=\"AnswerChoiceButton\" onClick={() => props.handleAnswerChoice(index)}>{choice[answerChoiceKey]}</button>\r\n        })}\r\n      </div>\r\n    )\r\n  // These question types need to render images for the answer choices\r\n  } else if (ConstantsUtils.IMAGE_ANSWER_CHOICES_QUESTION_TYPES.has(questionType)) {\r\n    let imageDir = ConstantsUtils.QUESTION_TYPE_TO_ANSWER_CHOICE_IMAGE_DIR[questionType];\r\n    return (\r\n      <div className=\"AnswerChoicesDisplay\">\r\n        {answerChoices.map((choice, index) => {\r\n          return <button disabled={hasSelectedAnswer} key={\"choice\" + index} className=\"AnswerChoiceButton\" onClick={() => props.handleAnswerChoice(index)}>\r\n            <img src={process.env.PUBLIC_URL + imageDir + choice[answerChoiceKey]} alt=\"Spell\"/>\r\n          </button>\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nAnswerChoicesDisplay.propTypes = {\r\n  // Type of question\r\n  questionType: PropTypes.string.isRequired,\r\n  // Array of answer choices (which themselves are dictionaries)\r\n  answerChoices: PropTypes.array.isRequired,\r\n  // Callback function when an answer is selected\r\n  handleAnswerChoice: PropTypes.func.isRequired,\r\n  // Whether an answer has already been selected\r\n  hasSelectedAnswer: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default AnswerChoicesDisplay;","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as ConstantsUtils from '../utils';\r\nimport './FeedbackDisplay.css';\r\n\r\nfunction FeedbackDisplay(props) {\r\n  const [questionType, setQuestionType] = useState(\"\");\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n  const [selectedAnswer, setSelectedAnswer] = useState({});\r\n  const [correctAnswer, setCorrectAnswer] = useState({});\r\n  const [explanation, setExplanation] = useState({});\r\n\r\n  const victoryLogoPath = process.env.PUBLIC_URL + \"/victory_logo.png\";\r\n  const defeatLogoPath = process.env.PUBLIC_URL + \"/defeat_logo.png\";\r\n\r\n  let feedbackLogoToUse;\r\n  if (isCorrect) {\r\n    feedbackLogoToUse = (\r\n      <div className=\"FeedbackLogoContainer\">\r\n        <img className=\"FeedbackLogo\" src={victoryLogoPath} alt=\"Victory Logo\"/>\r\n      </div>\r\n    );\r\n  } else {\r\n    feedbackLogoToUse = (\r\n      <div className=\"FeedbackLogoContainer\">\r\n        <img className=\"FeedbackLogo\" src={defeatLogoPath} alt=\"Defeat Logo\"/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  let answerChoiceKey = ConstantsUtils.determineAnswerChoiceKeyFromQuestionType(questionType);\r\n  let correctAnswerDisplay;\r\n  let selectedAnswerDisplay;\r\n  // These question types rendered text for the answer choices\r\n  if (ConstantsUtils.TEXT_ANSWER_CHOICES_QUESTION_TYPES.has(questionType)) {\r\n    correctAnswerDisplay = correctAnswer[answerChoiceKey];\r\n    selectedAnswerDisplay = selectedAnswer[answerChoiceKey];\r\n  // These question types rendered images for the answer choices\r\n  } else if (ConstantsUtils.IMAGE_ANSWER_CHOICES_QUESTION_TYPES.has(questionType)) {\r\n    let imageDir = ConstantsUtils.QUESTION_TYPE_TO_ANSWER_CHOICE_IMAGE_DIR[questionType];\r\n    correctAnswerDisplay = <img src={process.env.PUBLIC_URL + imageDir + correctAnswer[answerChoiceKey]} alt=\"Correct\"/>;\r\n    selectedAnswerDisplay = <img src={process.env.PUBLIC_URL + imageDir + selectedAnswer[answerChoiceKey]} alt=\"Selected\"/>;\r\n  }\r\n\r\n  // Render an explanation if it came along with the question\r\n  let explanationText = explanation.length > 0 ? <div className=\"ExplanationText\">{explanation}</div> : null;\r\n\r\n  let feedbackText;\r\n  if (isCorrect) {\r\n    feedbackText = (\r\n      <div className=\"FeedbackText\">\r\n        <div className=\"AnswerTextContainer\">\r\n          <div className=\"CorrectText\">Correct</div>\r\n          <div>\r\n            <span>Your Answer:</span>\r\n            <span className=\"CorrectAnswerText\">{correctAnswerDisplay}</span>\r\n          </div>\r\n        </div>\r\n        {explanationText}\r\n      </div>\r\n    );\r\n  } else {\r\n    feedbackText = (\r\n      <div className=\"FeedbackText\">\r\n        <div className=\"AnswerTextContainer\">\r\n          <div className=\"IncorrectText\">Incorrect</div>\r\n          <div>\r\n            <span>Your Answer:</span>\r\n            <span className=\"IncorrectAnswerText\">{selectedAnswerDisplay}</span>\r\n          </div>\r\n          <div>\r\n            <span>Correct Answer:</span>\r\n            <span className=\"CorrectAnswerText\">{correctAnswerDisplay}</span>\r\n          </div>\r\n        </div>\r\n        {explanationText}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  useEffect(() => {\r\n    setQuestionType(props.questionType);\r\n    setIsCorrect(props.isCorrect);\r\n    setSelectedAnswer(props.selectedAnswer);\r\n    setCorrectAnswer(props.correctAnswer);\r\n    setExplanation(props.explanation);\r\n  }, [props.questionType, props.isCorrect, props.selectedAnswer, props.correctAnswer, props.explanation]);\r\n\r\n  return (\r\n    <div className=\"FeedbackDisplay\">\r\n      {feedbackLogoToUse}\r\n      <div className=\"FeedbackTextAndContinueButtonContainer\">\r\n        {feedbackText}\r\n        <button className=\"ContinueButton\" onClick={props.handleContinue}>Continue</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nFeedbackDisplay.propTypes = {\r\n  // Type of question\r\n  questionType: PropTypes.string.isRequired,\r\n  // Whether the answer was correct or not\r\n  isCorrect: PropTypes.bool.isRequired,\r\n  // The answer selected by the user\r\n  selectedAnswer: PropTypes.object.isRequired,\r\n  // The correct answer\r\n  correctAnswer: PropTypes.object.isRequired,\r\n  // Explanation text\r\n  explanation: PropTypes.string.isRequired,\r\n  // Callback function to continue\r\n  handleContinue: PropTypes.func.isRequired\r\n}\r\n\r\nexport default FeedbackDisplay;","import React, { useEffect, useState } from 'react';\r\nimport MainBanner from '../MainBanner/MainBanner';\r\nimport ConfirmEndGamePopup from '../ConfirmEndGamePopup/ConfirmEndGamePopup';\r\nimport GameStatisticsDisplay from '../GameStatisticsDisplay/GameStatisticsDisplay';\r\nimport QuestionDisplay from '../QuestionDisplay/QuestionDisplay';\r\nimport AnswerChoicesDisplay from '../AnswerChoicesDisplay/AnswerChoicesDisplay';\r\nimport FeedbackDisplay from '../FeedbackDisplay/FeedbackDisplay';\r\nimport * as ConstantsUtils from '../utils';\r\nimport './GameInterface.css';\r\n\r\nfunction GameInterface(props) {\r\n  const [isEndGamePopupOpen, setIsEndGamePopupOpen] = useState(false);\r\n  const [questionCount, setQuestionCount] = useState(0);\r\n  const [correctCount, setCorrectCount] = useState(0);\r\n  const [incorrectCount, setIncorrectCount] = useState(0);\r\n  const [questionFromApi, setQuestionFromApi] = useState({});\r\n  const [hasSelectedAnswer, setHasSelectedAnswer] = useState(false);\r\n  const [selectedAnswer, setSelectedAnswer] = useState({});\r\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(false);\r\n\r\n  const toggleConfirmEndGamePopup = () => {\r\n    setIsEndGamePopupOpen(!isEndGamePopupOpen);\r\n  }\r\n\r\n  const handleEndGameButtonClick = () => {\r\n    toggleConfirmEndGamePopup();\r\n  }\r\n\r\n  const showOrHideEndGamePopup = () => {\r\n    if (isEndGamePopupOpen) {\r\n      return <ConfirmEndGamePopup handleClosePopup={toggleConfirmEndGamePopup}/>;\r\n    }\r\n  }\r\n\r\n  const fetchNextQuestion = () => {\r\n    fetch(\"/api/question\").then((response) => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      } else {\r\n        throw new Error(response.statusText);\r\n      }\r\n    })\r\n    .then((responseJson) => {\r\n      let questionData = {};\r\n      questionData.questionType = responseJson.questionType;\r\n      questionData.questionText = responseJson.questionText;\r\n      questionData.answerChoices = responseJson.answerChoices;\r\n      questionData.correctAnswerIndex = responseJson.correctAnswerIndex;\r\n      questionData.correctAnswer = responseJson.answerChoices[responseJson.correctAnswerIndex];\r\n      questionData.explanation = \"explanation\" in responseJson ? responseJson.explanation : \"\";\r\n      setQuestionFromApi(questionData);\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  const handleAnswerChoice = (index) => {\r\n    setHasSelectedAnswer(!hasSelectedAnswer);\r\n    setSelectedAnswer(questionFromApi.answerChoices[index]);\r\n\r\n    let answerChoiceKey = ConstantsUtils.determineAnswerChoiceKeyFromQuestionType(questionFromApi.questionType);\r\n    setIsAnswerCorrect(questionFromApi.correctAnswer[answerChoiceKey] === questionFromApi.answerChoices[index][answerChoiceKey]);\r\n  }\r\n\r\n  const incrementCorrectAndQuestionCount = () => {\r\n    setQuestionCount(questionCount + 1);\r\n    setCorrectCount(correctCount + 1);\r\n  }\r\n\r\n  const incrementIncorrectAndQuestionCount = () => {\r\n    setQuestionCount(questionCount + 1);\r\n    setIncorrectCount(incorrectCount + 1);\r\n  }\r\n\r\n  const resetStateForNewQuestion = () => {\r\n    setHasSelectedAnswer(false);\r\n    setSelectedAnswer({});\r\n    setIsAnswerCorrect(false);\r\n  }\r\n\r\n  const continueAfterViewingFeedback = () => {\r\n    if (isAnswerCorrect) {\r\n      incrementCorrectAndQuestionCount();\r\n    } else {\r\n      incrementIncorrectAndQuestionCount();\r\n    }\r\n\r\n    resetStateForNewQuestion();\r\n    fetchNextQuestion();\r\n  }\r\n\r\n  const showOrHideFeedbackDisplay = () => {\r\n    if (hasSelectedAnswer) {\r\n      return <FeedbackDisplay questionType={questionFromApi.questionType} isCorrect={isAnswerCorrect} selectedAnswer={selectedAnswer} correctAnswer={questionFromApi.correctAnswer} handleContinue={continueAfterViewingFeedback} explanation={questionFromApi.explanation}/>\r\n    }\r\n  }\r\n\r\n  const formatQuestionAndAnswerDisplayFromQuestionType = () => {\r\n    if (Object.keys(questionFromApi).length === 0) {\r\n      return null;\r\n    }\r\n\r\n    let questionDisplay;\r\n    // These question types need to render images as part of the question\r\n    if (ConstantsUtils.IMAGE_QUESTION_TYPES.has(questionFromApi.questionType)) {\r\n      let imageDir = ConstantsUtils.QUESTION_TYPE_TO_QUESTION_IMAGE_DIR[questionFromApi.questionType];\r\n      let imageKey = ConstantsUtils.QUESTION_TYPE_TO_IMAGE_KEY[questionFromApi.questionType];\r\n      questionDisplay = <QuestionDisplay questionText={questionFromApi.questionText} questionImage={process.env.PUBLIC_URL + imageDir + questionFromApi.correctAnswer[imageKey]}/>;\r\n    // These question types only need to render text as part of the question\r\n    } else {\r\n      questionDisplay = <QuestionDisplay questionText={questionFromApi.questionText} questionImage=\"\"/>;\r\n    }\r\n\r\n    let answerChoicesDisplay = <AnswerChoicesDisplay questionType={questionFromApi.questionType} answerChoices={questionFromApi.answerChoices} handleAnswerChoice={handleAnswerChoice} hasSelectedAnswer={hasSelectedAnswer}/>;\r\n\r\n    return (\r\n      <div className=\"QuestionAndAnswerChoicesDisplay\">\r\n        {questionDisplay}\r\n        {answerChoicesDisplay}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Fetch the question when the component first renders\r\n  useEffect(() => {\r\n    fetchNextQuestion();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"GameInterface\">\r\n      <MainBanner />\r\n      <button className=\"EndGameButton\" onClick={handleEndGameButtonClick}>\r\n        End Game\r\n      </button>\r\n      <GameStatisticsDisplay questionCount={questionCount} correctCount={correctCount}/>\r\n      <div className=\"QuestionAnswerFeedbackDisplay\">\r\n        {formatQuestionAndAnswerDisplayFromQuestionType()}\r\n        {showOrHideFeedbackDisplay()}\r\n      </div>\r\n      {showOrHideEndGamePopup()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameInterface;","import { HashRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport GameInterface from './components/GameInterface/GameInterface';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Route exact path=\"/\" component={Home}/>\n        <Route exact path=\"/play\" component={GameInterface}/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}